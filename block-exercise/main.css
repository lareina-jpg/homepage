body{
    background:lightblue;
}

img {
    max-width:100%;
}

.block{
    background:lightgoldenrodyellow;
    margin:10px;
    padding:10px;
}

.inline {
    background:lightpink;
    margin:10px;

    /* for inline elements, margin and padding don't function like they do with block elements */
    margin:10px;
    padding:10px;

    /* width and height have no effect on inline elements*/
    width:100px;
    height:100px;
}

.inline-block {
    background:lightskyblue;
    display:inline-block;
    margin:10px;
    padding:10px;

    /* unlike inline, inline-block can be given width and height*/
    width:100px;
    height:100px;
}

.content-box {
    background:lightgray;
    padding:40px;
    border:5px solid red;
    margin:100px;
    
    width:200px;
    height:200px;
}

.border-box {
    background:lightgray;
    padding:40px;
    border:5px solid red;
    margin:100px;
    
    width:200px;
    height:200px;

    /* border-box includes the padding and border sizes in the total width and height of the element */
    box-sizing:border-box;
    
}

/* *{the box-sizing:border-box;} property is a wildcard property that will be applied to every single element on your page, so wildcard properties should be used sparingly */

.square {
    background:burlywood;
    width:100px;
    height:100px;
    margin:10px;
}

/* we are leaving this square class alone and creating a new class to be a modifier class that changes the square's behavior. always put the modifier class below the original. the rule further down in the stylesheet will win out in specificty. */

.relative {
    background:honeydew;
    position:relative;
    top:20px;
    left:20px;
}

/* when using top,bottom,left,right, choose 1 edge (top OR bottom and left OR right) for your entire stylesheet */

.fixed {
    background:limegreen;
    position:fixed;
    /* fixed position will remove the element from the flow of the page, placing it on a different "layer" and displaying it relative to your viewport */
    bottom:0px;
    right:0px;
    margin:0px;
}

.sticky {
    background:lavender;
    position:sticky;
    bottom:0px;
}

/* sticky switches between "relative" vs "fixed" based on where it is on the page. usually you're using top/bottom to position sticky values. */

.absolute {
    background:purple;
    position:absolute;
    top:50px;
    left:50px;
}

/* absolute has two methods of behavior. one without a position parent and one with a position parent as an anchor/ancestor for where it sits. */

.smiley {
    background:yellow;
    width:200px;
    height:200px;
    margin:50px;
    position:relative;
    border-radius:100%
}

.eye {
    background:darkblue;
    width:30px;
    height:30px;
    position:absolute;
    /* in order for this element to be positioned relative to its container, the container also needs to have a position value, like "relative" */
    top:50px;
    border-radius:100%
}

.left {
    left:50px;
}

.right {
    right:50px;
}

.mouth {
    background:darkblue;
    width:100px;
    height:40px;
    position:absolute;
    bottom:50px;
    left:50px;
    border-radius:0 0 100% 100%;
}
