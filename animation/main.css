*{
    box-sizing:border-box;
}

img {
    max-width:100%;
}

body {
    margin:0;
    /* body has default margin of 8px */
}

.square {
    background-color:burlywood;
    width:200px;
    height:200px;

    /* animation-name: test;
    animation-duration: 4s;
    animation-delay: 2s; */

    /* if you have -2, it'll start halfway inbetween the animation and only play the last 2 seconds */

    /* animation-iteration-count: 1; */
    /* animation-iteration-count specifies # of times the animation should run. setting it to infinite will run forever. */

    /* animation-direction: alternate; */
    /* animation-direction plays the animation normal, reverse, alternate (forward then backward), or alternate reverse (backwards then forward) */

    /* animation-timing-function: cubic-bezier(0.8,.62,0.7,0.29); */
    /* this is the speed of animation. choices are ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier (n,n,n,n). this tool helps visualize cubic bezier curves: (https://cubic-bezier.com/#.17,.67,.83,.67) */
    
    /* animation-fill-mode: both; */
    /* animations only exist when they're called into being by the keyframe. the element will go back to the default element once animation is done. the fill-mode property changes this. (none, forwards, backwards, both) */

    animation: test 4s 2s 1 alternate ease-in-out both; 
    /* the shorthand property compresses all of these into a single line! */
}

@keyframes test {
    0% {
        background-color:red;
        width:200px;
    }
    100% {
        background-color:yellow;
        width:600px;
    }
}

.container {
    background-color:pink;
    height:100vh;
    display:flex;
    justify-content:space-evenly;
    align-items:center;
    position:relative;

    /* mover exceeds bounds of container and creates a horizontal scroll, if we want to hide this we use... */
    overflow: hidden;
}

.circle {
    background-color:rgb(99, 99, 156);
    width:15vw;
    height:15vw;
    /* this makes it a perfect circle because it's proportional only to the viewport height. you could also use vw for viewport width */
    border-radius:50%;
    animation: pulse 2s infinite alternate ease-in-out;
}

@keyframes pulse {
    0% {
        background: rgb(99, 99, 156);

        /* width:15vw; 
        height:15vw;*/

        /* transform: scale(1); */
        /* transform tool, similar to Photoshop/Illustrator, has many properties and is the recommended way to animate */

        scale: 1;
        /* this is a new tool! */
    }

    100% {
        background:rgb(226, 101, 12);

        /* width:20vw; 
        height:20vw;
        animating changes in width and height would push other objects around and not grow from the perfect center of the circle */

        /* transform: scale(2); */

        scale: 1.3;
    }
}

.box {
    background-color:rgb(99, 99, 156);
    width:15vw;
    height:15vw;
    animation: spin 3s infinite linear;
}

@keyframes spin {
    0% {
        rotate:0;
    }

    100% {
        rotate:360deg;
    }
}

.mover {
    background:rgb(99, 99, 156);
    width:150px;
    height:50px;
    position:absolute;
    /* don't forget to have a positioned ancestor, which here would be the container */
    bottom:0;
    left:0;
    animation: move 4s infinite ease-in-out;
}

@keyframes move {
    0% {
        /* left:-150px; */
        translate:-150px;
        rotate:0deg;
    }

    45% {
        rotate:0deg;
    }

    50% {
        rotate:180deg;
    }

    100% {
        /* left:100vw; */
        translate:100vw;
        /* 50px; would move it down */
        rotate:180deg;
    }
}

.changer {
    background-color:rgb(99, 99, 156);
    width:15vw;
    height:15vw;
    transition: background 4s, 
                border-radius 2s, 
                rotate 2s ease-in;
    /* don't put transition on the hover rule if you want it in both directions*/
}

.changer:hover {
    background-color:rgb(226, 101, 12);
    border-radius:50%;
    rotate:180deg;
}